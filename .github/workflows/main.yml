            - name: Install Packages with Pip
  # You may pin to the exact commit or the version.
  # uses: parafoxia/pip-install@98bd468285d8ffe5e6ab25c5b822c6a91831092d
  uses: parafoxia/pip-install@v1.0.0
  with:
    # The packages to install.
    packages: # optional, default is 
    # Install from the given requirements file. Multiple files can be provided.
    requirement: # optional, default is 
    # Constrain versions using the given constraints file. Multiple files can be provided.
    constraint: # optional, default is 
    # Don't install package dependencies.
    no-deps: # optional, default is false
    # Include pre-release and development versions. By default, pip only finds stable versions.
    pre: # optional, default is false
    # Install a project in editable mode (i.e. setuptools "develop mode") from a local project path or a VCS url.
    editable: # optional, default is 
    # Don't actually install anything, just print what would be. Can be used in combination with `ignore_installed` to 'resolve' the requirements.
    dry-run: # optional, default is false
    # Install packages into \<dir>. By default this will not replace existing files/folders in \<dir>. Set `upgrade` to true to replace existing packages in \<dir> with new versions.
    target: # optional, default is 
    # Only use wheels compatible with \<platform>. Defaults to the platform of the running system. Use this option multiple times to specify multiple platforms supported by the target interpreter.
    platform: # optional, default is 
    # The Python interpreter version to use for wheel and "Requires-Python" compatibility checks. Defaults to a version derived from the running interpreter. The version can be specified using up to three dot-separated integers (e.g. "3" for 3.0.0, "3.7" for 3.7.0, or "3.7.3"). A major-minor version can also be given as a string without dots (e.g. "37" for 3.7.0).
    python-version: # optional, default is 
    # Only use wheels compatible with Python implementation \<implementation>, e.g. 'pp', 'jy', 'cp',  or 'ip'. If not specified, then the current interpreter implementation is used.  Use 'py' to force implementation-agnostic wheels.
    implementation: # optional, default is 
    # Only use wheels compatible with Python abi \<abi>, e.g. 'pypy_41'. If not specified, then the current interpreter abi tag is used. Use this option multiple times to specify multiple abis supported by the target interpreter. Generally you will need to specify `implementation`, `platform`, and `python-version` when using this option.
    abi: # optional, default is 
    # Install to the Python user install directory for your platform. Typically ~/.local/, or %APPDATA%\Python on Windows. (See the Python documentation for site.USER_BASE for full details.)
    user: # optional, default is false
    # Install everything relative to this alternate root directory.
    root: # optional, default is 
    # Installation prefix where lib, bin and other top-level folders are placed. Note that the resulting installation may contain scripts and other resources which reference the Python interpreter of pip, and not that of `prefix`. See also the `python` option if the intention is to install packages into another (possibly pip-free) environment.
    prefix: # optional, default is 
    # Directory to check out editable projects into. The default in a virtualenv is "\<venv path>/src". The default for global installs is "\<current dir>/src".
    src: # optional, default is 
    # Upgrade all specified packages to the newest available version. The handling of dependencies depends on the upgrade-strategy used.
    upgrade: # optional, default is false
    # Determines how dependency upgrading should be handled [default: only-if-needed]. "eager" - dependencies are upgraded regardless of whether the currently installed version satisfies the requirements of the upgraded package(s). "only-if-needed" -  are upgraded only when they do not satisfy the requirements of the upgraded package(s).
    upgrade-strategy: # optional, default is 
    # Reinstall all packages even if they are already up-to-date.
    force-reinstall: # optional, default is false
    # Ignore the installed packages, overwriting them. This can break your system if the existing package is of a different version or was installed with a different package manager!
    ignore-installed: # optional, default is false
    # Ignore the Requires-Python information.
    ignore-requires-python: # optional, default is false
    # Disable isolation when building a modern source distribution. Build dependencies specified by PEP 518 must be already installed if this option is used.
    no-build-isolation: # optional, default is false
    # Use PEP 517 for building source distributions (use --no-use-pep517 to force legacy behaviour).
    use-pep517: # optional, default is false
    # Reverse of `use-pep517`.
    no-use-pep517: # optional, default is false
    # Check the build dependencies when PEP517 is used.
    check-build-dependencies: # optional, default is false
    # Allow pip to modify an EXTERNALLY-MANAGED Python installation
    break-system-packages: # optional, default is false
    # Configuration settings to be passed to the PEP 517 build backend. Settings take the form KEY=VALUE. Use multiple `config-settings` options to pass multiple keys to the backend.
    config-settings: # optional, default is 
    # Extra global options to be supplied to the setup.py call before the install or bdist_wheel command.
    global-option: # optional, default is 
    # Compile Python source files to bytecode
    compile: # optional, default is false
    # Do not compile Python source files to bytecode
    no-compile: # optional, default is false
    # Do not warn when installing scripts outside PATH
    no-warn-script-location: # optional, default is false
    # Do not warn about broken dependencies
    no-warn-conflicts: # optional, default is false
    # Do not use binary packages. Can be supplied multiple times, and each time adds to the existing value. Accepts either ":all:" to disable all binary packages, ":none:" to empty the set (notice the colons), or one or more package names with commas between them (no colons). Note that some packages are tricky to compile and may fail to install when this option is used on them.
    no-binary: # optional, default is 
    # Do not use source packages. Can be supplied multiple times, and each time adds to the existing value. Accepts either ":all:" to disable all source packages, ":none:" to empty the set, or one or more package names with commas between them. Packages without binary distributions will fail to install when this option is used on them.
    only-binary: # optional, default is 
    # Prefer older binary packages over newer source packages.
    prefer-binary: # optional, default is false
    # Require a hash to check each requirement against, for repeatable installs. This option is implied when any package in a requirements file has a --hash option.
    require-hashes: # optional, default is false
    # Specify whether the progress bar should be used [on, off] (default: on)
    progress-bar: # optional, default is 
    # Action if pip is run as a root user. By default, a warning message is shown.
    root-user-action: # optional, default is 
    # Generate a JSON file describing what pip did to install the provided requirements. Can be used in combination with `dry-run` and `ignore-installed` to 'resolve' the requirements. When - is used as file name it writes to stdout. When writing to stdout, please combine with the `quiet` option to avoid mixing pip logging output with JSON output.
    report: # optional, default is 
    # Don't clean up build directories.
    no-clean: # optional, default is false
          
